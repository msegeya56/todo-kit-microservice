// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "github.com/msegeya56/todo-kit-microsrvice/customer/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	PostEndpoint      endpoint.Endpoint
	GetAllEndpoint    endpoint.Endpoint
	GetByIDEndpoint   endpoint.Endpoint
	UpdateEndpoint    endpoint.Endpoint
	GetByDateEndpoint endpoint.Endpoint
	DeleteEndpoint    endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.CustomerService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		DeleteEndpoint:    MakeDeleteEndpoint(s),
		GetAllEndpoint:    MakeGetAllEndpoint(s),
		GetByDateEndpoint: MakeGetByDateEndpoint(s),
		GetByIDEndpoint:   MakeGetByIDEndpoint(s),
		PostEndpoint:      MakePostEndpoint(s),
		UpdateEndpoint:    MakeUpdateEndpoint(s),
	}
	for _, m := range mdw["Post"] {
		eps.PostEndpoint = m(eps.PostEndpoint)
	}
	for _, m := range mdw["GetAll"] {
		eps.GetAllEndpoint = m(eps.GetAllEndpoint)
	}
	for _, m := range mdw["GetByID"] {
		eps.GetByIDEndpoint = m(eps.GetByIDEndpoint)
	}
	for _, m := range mdw["Update"] {
		eps.UpdateEndpoint = m(eps.UpdateEndpoint)
	}
	for _, m := range mdw["GetByDate"] {
		eps.GetByDateEndpoint = m(eps.GetByDateEndpoint)
	}
	for _, m := range mdw["Delete"] {
		eps.DeleteEndpoint = m(eps.DeleteEndpoint)
	}
	return eps
}
